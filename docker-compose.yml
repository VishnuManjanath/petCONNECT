version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: petconnect-mysql
    environment:
      MYSQL_DATABASE: petconnect
      MYSQL_ROOT_PASSWORD: password
      MYSQL_USER: petconnect_user
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init-scripts:/docker-entrypoint-initdb.d/
    networks:
      - petconnect-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-ppassword"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # petCONNECT Application
  petconnect-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: petconnect-app
    environment:
      # Database configuration
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/petconnect?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: password
      
      # JPA configuration
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_SHOW_SQL: false
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: false
      
      # Application configuration
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8080
      
      # Logging configuration
      LOGGING_LEVEL_COM_PETCONNECT_PROJECT: INFO
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: WARN
      
      # Performance tuning
      SPRING_JPA_PROPERTIES_HIBERNATE_JDBC_BATCH_SIZE: 20
      SPRING_JPA_PROPERTIES_HIBERNATE_ORDER_INSERTS: true
      SPRING_JPA_PROPERTIES_HIBERNATE_ORDER_UPDATES: true
      SPRING_JPA_PROPERTIES_HIBERNATE_JDBC_BATCH_VERSIONED_DATA: true
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - petconnect-network
    volumes:
      - app_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # pgAdmin (Optional - for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: petconnect-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@petconnect.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - mysql
    networks:
      - petconnect-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped
    profiles:
      - dev  # Only start with --profile dev

  # Redis (Optional - for session storage and caching)
  redis:
    image: redis:7-alpine
    container_name: petconnect-redis
    ports:
      - "6379:6379"
    networks:
      - petconnect-network
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    profiles:
      - dev  # Only start with --profile dev

volumes:
  mysql_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local

networks:
  petconnect-network:
    driver: bridge
    name: petconnect-network

